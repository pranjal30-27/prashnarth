[
  {
    "id": 1,
    "category": "DSA",
    "title": "Reverse a string",
    "description": "Write a program to reverse a string.",
    "solutions": {
      "C++": "#include &lt;iostream&gt;\nusing namespace std;\nint main(){string s=\"hello\";reverse(s.begin(),s.end());cout<<s;}",
      "Python": "s='hello'\nprint(s[::-1])",
      "JavaScript": "let s='hello';\nconsole.log(s.split('').reverse().join(''));"
    }
  },
  {
    "id": 2,
    "category": "SQL",
    "title": "Find highest salary",
    "description": "Write a query to find the highest salary from Employee table.",
    "solutions": {
      "SQL": "SELECT MAX(salary) FROM Employee;"
    }
  },
  {
    "id": 3,
    "category": "Web Development",
    "title": "Difference between inline, block, and inline-block elements",
    "description": "Explain with examples how these display properties behave in CSS.",
    "solutions": {
      "Answer": "Inline: does not start on a new line. Block: takes full width. Inline-block: behaves like inline but accepts block properties."
    }
  },
  {
    "id": 4,
    "category": "System Design",
    "title": "Design a URL Shortener like bit.ly",
    "description": "How would you design a scalable URL shortener system?",
    "solutions": {
      "Answer": "Discuss database choice, hashing, collision handling, scaling with load balancers, caching etc."
    }
  },
  {
    "id": 5,
    "category": "OOP Concepts",
    "title": "What is polymorphism?",
    "description": "Explain polymorphism in Object-Oriented Programming with example.",
    "solutions": {
      "Answer": "Polymorphism allows objects to take many forms. Example: method overriding and method overloading."
    }
  },
  {
    "id": 6,
    "category": "Aptitude",
    "title": "Train Problem",
    "description": "Two trains are moving at different speeds... solve for time taken to cross each other.",
    "solutions": {
      "Answer": "Relative speed concept is applied: time = (sum of lengths)/(relative speed)."
    }
  },
  {
    "id": 7,
    "category": "Real World Problems",
    "title": "ATM System Design",
    "description": "Design an ATM machine system with necessary use cases.",
    "solutions": {
      "Answer": "Include modules for authentication, cash withdrawal, deposit, transaction history, and integration with bank servers."
    }
  },
  {
    "id": 8,
    "category": "SQL",
    "title": "Find all employees who have more than one manager in the Employee-Manager table.",
    "description": "Checks employees mapped to more than 1 manager.",
    "solutions": {
      "SQL": "SELECT employee_id\nFROM EmployeeManager\nGROUP BY employee_id\nHAVING COUNT(manager_id) > 1;"
    }
  },
  {
    "id": 9,
    "category": "SQL",
    "title": "Given a table of Orders, find the top 3 customers who have spent the most.",
    "description": "Find the top 3 customers based on their total spending.",
    "solutions": {
      "SQL": "SELECT customer_id, SUM(amount) AS total_spent\nFROM Orders\nGROUP BY customer_id\nORDER BY total_spent DESC\nLIMIT 3;"
    }
  },
  {
    "id": 10,
    "category": "SQL",
    "title": "Detect and remove duplicate rows in a table while keeping the first occurrence.",
    "description": "Write a query to remove duplicates from a table.",
    "solutions": {
      "SQL": "DELETE FROM Employee\nWHERE id NOT IN (\n   SELECT MIN(id)\n   FROM Employee\n   GROUP BY name, salary, department\n);\n"
    }
  },
  {
    "id": 11,
    "category": "SQL",
    "title": "Write a query to find Nth highest salary using window functions.",
    "description": "Uses DENSE_RANK() for Nth highest salary.",
    "solutions": {
      "SQL": "SELECT DISTINCT salary\nFROM (\n   SELECT salary, DENSE_RANK() OVER (ORDER BY salary DESC) AS rnk\n   FROM Employee\n) t\nWHERE rnk = 3; -- Replace 3 with N"
    }
  },
  {
    "id": 12,
    "category": "SQL",
    "title": "Implement a query to perform a self-join on Employee to list manager-employee pairs.",
    "description": "List all employees along with their managers.",
    "solutions": {
      "SQL": "SELECT e1.name AS Employee, e2.name AS Manager\nFROM Employees e1\n JOIN Employees e2\n ON e1.manager_id = e2.id;"
    }
  },
  {
    "id": 13,
    "category": "DSA",
    "title": "Find all sets of three numbers in an array whose sum equals zero.",
    "description": "Given an array of integers, find all unique triplets (a, b, c) such that a + b + c = 0.",
    "solutions": {
      "C++":"#include <iostream>\n#include <vector>\nusing namespace std;\n\nvector<vector<int>> findTriplets(vector<int> &arr) {\n    vector<vector<int>> res; \n    int n = arr.size(); \n// Generating all triplets\n    for (int i = 0; i < n - 2; i++) {\n        for (int j = i + 1; j < n - 1; j++) {\n            for (int k = j + 1; k < n; k++) {\n                // If the sum of a triplet equals to zero\n                // then add it's indices to the result\n                if (arr[i] + arr[j] + arr[k] == 0) \n                    res.push_back({i, j, k});\n            }\n        }\n    }\n    return res; \n}\n\nint main() {\n    vector<int> arr = {0, -1, 2, -3, 1};\n    vector<vector<int>> res = findTriplets(arr);\n    for(int i = 0; i < res.size(); i++)\n        cout << res[i][0] << \" \" << res[i][1] << \" \" << res[i][2] << endl;\n\n    return 0;\n}\n",
      "Python": "def findTriplets(arr):\n    res = []\n    n = len(arr)\n\n    # Generating all triplets\n    for i in range(n - 2):\n        for j in range(i + 1, n - 1):\n            for k in range(j + 1, n):\n                # If the sum of triplet equals to zero\n                # then add it's indexes to the result\n                if arr[i] + arr[j] + arr[k] == 0:\n                    res.append([i, j, k])\n    return res\n\narr = [0, -1, 2, -3, 1]\nres = findTriplets(arr)\nfor triplet in res:\n    print(triplet[0], triplet[1], triplet[2])",
      "JavaScript": "function findTriplets(arr) {\n    const res = [];\n    const n = arr.length;\n\n    // Generating all triplets\n    for (let i = 0; i < n - 2; i++) {\n        for (let j = i + 1; j < n - 1; j++) {\n            for (let k = j + 1; k < n; k++) {\n                // If the sum of triplet equals to zero\n                // then add it's indexes to the result\n                if (arr[i] + arr[j] + arr[k] === 0) {\n                    res.push([i, j, k]);\n                }\n            }\n        }\n    }\n    return res;\n}\n\nconst arr = [0, -1, 2, -3, 1];\nconst res = findTriplets(arr);\nres.forEach(triplet => console.log(triplet[0], triplet[1], triplet[2]));"
    }
  },
  {
    "id": 14,
    "category": "DSA",
    "title": "Find the longest palindromic substring in a given string.",
    "description": "Given a string, find the longest substring which is a palindrome.",
    "solutions": {
      "C++":"#include <iostream>\n#include <string>\nusing namespace std;\n\nstring longestPalindrome(string s) {\n    int start = 0, maxLength = 1;\n    int len = s.length();\n\n    for (int i = 0; i < len; i++) {\n        // Odd length palindromes\n        int low = i - 1;\n        int high = i + 1;\n        while (low >= 0 && high < len && s[low] == s[high]) {\n            if (high - low + 1 > maxLength) {\n                start = low;\n                maxLength = high - low + 1;\n            }\n            low--;\n            high++;\n        }\n\n        // Even length palindromes\n        low = i;\n        high = i + 1;\n        while (low >= 0 && high < len && s[low] == s[high]) {\n            if (high - low + 1 > maxLength) {\n                start = low;\n                maxLength = high - low + 1;\n            }\n            low--;\n            high++;\n        }\n    }\n    return s.substr(start, maxLength);\n}\n\nint main() {\n    string s = \"babad\";\n    cout << \"Longest Palindromic Substring: \" << longestPalindrome(s) << endl;\n    return 0;\n}\n",
      "Python": "def longestPalindrome(s):\n    start, maxLength = 0, 1\n    length = len(s)\n\n    for i in range(length):\n        # Odd length palindromes\n        low, high = i - 1, i + 1\n        while low >= 0 and high < length and s[low] == s[high]:\n            if high - low + 1 > maxLength:\n                start = low\n                maxLength = high - low + 1\n            low -= 1\n            high += 1\n\n        # Even length palindromes\n        low, high = i, i + 1\n        while low >= 0 and high < length and s[low] == s[high]:\n            if high - low + 1 > maxLength:\n                start = low\n                maxLength = high - low + 1\n            low -= 1\n            high += 1\n\n    return s[start:start + maxLength]\n\ns = \"babad\"\nprint(\"Longest Palindromic Substring:\", longestPalindrome(s))",
      "JavaScript": "function longestPalindrome(s) {\n    let start = 0, maxLength = 1;\n    const length = s.length;\n\n    for (let i = 0; i < length; i++) {\n        // Odd length palindromes\n        let low = i - 1;\n        let high = i + 1;\n        while (low >= 0 && high < length && s[low] === s[high]) {\n            if (high - low + 1 > maxLength) {\n                start = low;\n                maxLength = high - low + 1;\n            }\n            low--;\n            high++;\n        }\n\n        // Even length palindromes\n        low = i;\n        high = i + 1;\n        while (low >= 0 && high < length && s[low] === s[high]) {\n            if (high - low + 1 > maxLength) {\n                start = low;\n                maxLength = high - low + 1;\n            }\n            low--;\n            high++;\n        }\n    }\n    return s.substring(start, start + maxLength);\n}\n\nconst s = \"babad\";\nconsole.log(\"Longest Palindromic Substring:\", longestPalindrome(s));"
    }
  },
  {
    "id": 15,
    "category": "DSA",
    "title": "Merge two sorted linked lists and return it as a new sorted list.",
    "description": "Given two sorted linked lists, merge them into a single sorted linked list.",
    "solutions": {
      "C++":"#include <iostream>\nusing namespace std;\n\nstruct ListNode {\n    int val;\n    ListNode *next;\n    ListNode(int x) : val(x), next(NULL) {}\n};\n\nListNode* mergeTwoLists(ListNode* l1, ListNode* l2) {\n    if (!l1) return l2;\n    if (!l2) return l1;\n\n    if (l1->val < l2->val) {\n        l1->next = mergeTwoLists(l1->next, l2);\n        return l1;\n    } else {\n        l2->next = mergeTwoLists(l1, l2->next);\n        return l2;\n    }\n}\n\nvoid printList(ListNode* node) {\n    while (node) {\n        cout << node->val << \" -> \";\n        node = node->next;\n    }\n    cout << \"NULL\" << endl;\n}\n\nint main() {\n    ListNode* l1 = new ListNode(1);\n    l1->next = new ListNode(3);\n    l1->next->next = new ListNode(5);\n\n    ListNode* l2 = new ListNode(2);\n    l2->next = new ListNode(4);\n    l2->next->next = new ListNode(6);\n\n    ListNode* mergedList = mergeTwoLists(l1, l2);\n    printList(mergedList);\n\n    return 0;\n}\n",
      "Python": "class ListNode:\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\ndef mergeTwoLists(l1, l2):\n    if not l1:\n        return l2\n    if not l2:\n        return l1\n\n    if l1.val < l2.val:\n        l1.next = mergeTwoLists(l1.next, l2)\n        return l1\n    else:\n        l2.next = mergeTwoLists(l1, l2.next)\n        return l2\n\ndef printList(node):\n    while node:\n        print(node.val, end=\" -> \")\n        node = node.next\n    print(\"NULL\")\n\nl1 = ListNode(1)\nl1.next = ListNode(3)\nl1.next.next = ListNode(5)\n\nl2 = ListNode(2)\nl2.next = ListNode(4)\nl2.next.next = ListNode(6)\n\nmergedList = mergeTwoLists(l1, l2)\nprintList(mergedList)",
      "JavaScript": "class ListNode {\n    constructor(x) {\n        this.val = x;\n        this.next = null;\n    }\n}\n\nfunction mergeTwoLists(l1, l2) {\n    if (!l1) return l2;\n    if (!l2) return l1;\n\n    if (l1.val < l2.val) {\n        l1.next = mergeTwoLists(l1.next, l2);\n        return l1;\n    } else {\n        l2.next = mergeTwoLists(l1, l2.next);\n        return l2;\n    }\n}\n\nfunction printList(node) {\n    while (node) {\n        process.stdout.write(node.val + ' -> ');\n        node = node.next;\n    }\n    console.log('NULL');\n}\n\nconst l1 = new ListNode(1);\nl1.next = new ListNode(3);\nl1.next.next = new ListNode(5);\n\nconst l2 = new ListNode(2);\nl2.next = new ListNode(4);\nl2.next.next = new ListNode(6);\n\nconst mergedList = mergeTwoLists(l1, l2);\nprintList(mergedList);"
    }
  },
  {
    "id": 16,
    "category": "DSA",
    "title": "Find the first non-repeating character in a string.",
    "description": "Given a string, find the first character that does not repeat.",
    "solutions": {
      "C++":"#include <iostream>\n#include <string>\n#include <unordered_map>\nusing namespace std;\n\nchar firstNonRepeatingChar(const string &s) {\n    unordered_map<char, int> charCount;\n\n    // Count occurrences of each character\n    for (char c : s) {\n        charCount[c]++;\n    }\n\n    // Find the first non-repeating character\n    for (char c : s) {\n        if (charCount[c] == 1) {\n            return c;\n        }\n    }\n\n    return '\\0'; // Return null character if no non-repeating character found\n}\n\nint main() {\n    string s = \"swiss\";\n    char result = firstNonRepeatingChar(s);\n    if (result != '\\0')\n        cout << \"First non-repeating character: \" << result << endl;\n    else\n        cout << \"No non-repeating character found.\" << endl;\n    return 0;\n}\n",
      "Python": "def firstNonRepeatingChar(s):\n    char_count = {}\n\n    # Count occurrences of each character\n    for c in s:\n        char_count[c] = char_count.get(c, 0) + 1\n\n    # Find the first non-repeating character\n    for c in s:\n        if char_count[c] == 1:\n            return c\n\n    return None  # Return None if no non-repeating character found\n\ns = \"swiss\"\nresult = firstNonRepeatingChar(s)\nif result:\n    print(\"First non-repeating character:\", result)\nelse:\n    print(\"No non-repeating character found.\")",
      "JavaScript": "function firstNonRepeatingChar(s) {\n    const charCount = {};\n\n    // Count occurrences of each character\n    for (const c of s) {\n        charCount[c] = (charCount[c] || 0) + 1;\n    }\n\n    // Find the first non-repeating character\n    for (const c of s) {\n        if (charCount[c] === 1) {\n            return c;\n        }\n    }\n\n    return null; // Return null if no non-repeating character found\n}\n\nconst s = \"swiss\";\nconst result = firstNonRepeatingChar(s);\nif (result) {\n    console.log(\"First non-repeating character:\", result);\n} else {\n    console.log(\"No non-repeating character found.\");\n}"
    }
  },
  {
    "id": 17,
    "category": "DSA",
    "title": "Implement a stack using queues.",
    "description": "Use two queues to implement stack operations (push, pop, top, empty).",
    "solutions": {
      "C++":"#include <iostream>\n#include <queue>\nusing namespace std;\n\nclass MyStack {\nprivate:\n    queue<int> q1, q2;\npublic:\n    MyStack() {}\n\n    void push(int x) {\n        q2.push(x);\n        while (!q1.empty()) {\n            q2.push(q1.front());\n            q1.pop();\n        }\n        swap(q1, q2);\n    }\n\n    int pop() {\n        int top = q1.front();\n        q1.pop();\n        return top;\n    }\n\n    int top() {\n        return q1.front();\n    }\n\n    bool empty() {\n        return q1.empty();\n    }\n};\n\nint main() {\n    MyStack stack;\n    stack.push(1);\n    stack.push(2);\n    cout << stack.top() << endl; // returns 2\n    cout << stack.pop() << endl; // returns 2\n    cout << stack.empty() << endl; // returns false\n    return 0;\n}\n",
      "Python": "from collections import deque\n\nclass MyStack:\n    def __init__(self):\n        self.q1 = deque()\n        self.q2 = deque()\n\n    def push(self, x: int) -> None:\n        self.q2.append(x)\n        while self.q1:\n            self.q2.append(self.q1.popleft())\n        self.q1, self.q2 = self.q2, self.q1\n\n    def pop(self) -> int:\n        return self.q1.popleft()\n\n    def top(self) -> int:\n        return self.q1[0]\n\n    def empty(self) -> bool:\n        return not self.q1\n\n# Example usage:\nstack = MyStack()\nstack.push(1)\nstack.push(2)\nprint(stack.top())  # returns 2\nprint(stack.pop())  # returns 2\nprint(stack.empty())  # returns False",
      "JavaScript": "class MyStack {\n    constructor() {\n        this.q1 = [];\n        this.q2 = [];\n    }\n\n    push(x) {\n        this.q2.push(x);\n        while (this.q1.length) {\n            this.q2.push(this.q1.shift());\n        }\n        [this.q1, this.q2] = [this.q2, this.q1];\n    }\n\n    pop() {\n        return this.q1.shift();\n    }\n\n    top() {\n        return this.q1[0];\n    }\n\n    empty() {\n        return this.q1.length === 0;\n    }\n}\n\n// Example usage:\nconst stack = new MyStack();\nstack.push(1);\nstack.push(2);\nconsole.log(stack.top());  // returns 2\nconsole.log(stack.pop());  // returns 2\nconsole.log(stack.empty());  // returns false"
    }
  },
  {
    "id": 18,
    "category": "DSA",
    "title": "Find the maximum product of two integers in an array.",
    "description": "Given an array of integers, find the maximum product of any two integers.",
    "solutions": {
      "C++":"#include <iostream>\n#include <vector>\n#include <algorithm>\nusing namespace std;\n\nint maxProduct(vector<int>& nums) {\n    sort(nums.begin(), nums.end());\n    int n = nums.size();\n    return max(nums[0] * nums[1], nums[n - 1] * nums[n - 2]);\n}\n\nint main() {\n    vector<int> nums = {1, 5, -10, -20, 3};\n    cout << \"Maximum product of two integers: \" << maxProduct(nums) << endl;\n    return 0;\n}\n",
      "Python": "def maxProduct(nums):\n    nums.sort()\n    return max(nums[0] * nums[1], nums[-1] * nums[-2])\n\nnums = [1, 5, -10, -20, 3]\nprint(\"Maximum product of two integers:\", maxProduct(nums))",
      "JavaScript": "function maxProduct(nums) {\n    nums.sort((a, b) => a - b);\n    const n = nums.length;\n    return Math.max(nums[0] * nums[1], nums[n - 1] * nums[n - 2]);\n}\n\nconst nums = [1, 5, -10, -20, 3];\nconsole.log(\"Maximum product of two integers:\", maxProduct(nums));"
    }
  },
  {
  "id": 19,
  "category": "Web Development",
  "title": "Implement a responsive navigation bar using HTML, CSS, and JavaScript",
  "description": "Create a navigation bar that adapts to different screen sizes.",
  "solutions": {
    "HTML": "<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\\\"en\\\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\\\"UTF-8\\\"&gt;\n    &lt;meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\"&gt;\n    &lt;link rel=\\\"stylesheet\\\" href=\\\"styles.css\\\"&gt;\n    &lt;title&gt;Responsive Navbar&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;nav class=\\\"navbar\\\"&gt;\n        &lt;div class=\\\"logo\\\"&gt;MySite&lt;/div&gt;\n        &lt;ul class=\\\"nav-links\\\" id=\\\"navLinks\\\"&gt;\n            &lt;li&gt;&lt;a href=\\\"#home\\\"&gt;Home&lt;/a&gt;&lt;/li&gt;\n            &lt;li&gt;&lt;a href=\\\"#about\\\"&gt;About&lt;/a&gt;&lt;/li&gt;\n            &lt;li&gt;&lt;a href=\\\"#services\\\"&gt;Services&lt;/a&gt;&lt;/li&gt;\n            &lt;li&gt;&lt;a href=\\\"#contact\\\"&gt;Contact&lt;/a&gt;&lt;/li&gt;\n        &lt;/ul&gt;\n        &lt;div class=\\\"burger\\\" id=\\\"burger\\\"&gt;\n            &lt;div class=\\\"line1\\\"&gt;&lt;/div&gt;\n            &lt;div class=\\\"line2\\\"&gt;&lt;/div&gt;\n            &lt;div class=\\\"line3\\\"&gt;&lt;/div&gt;\n        &lt;/div&gt;\n    &lt;/nav&gt;\n    &lt;script src=\\\"script.js\\\"&gt;&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;</code></pre>"
    }
  },
  {
    "id": 20,
    "category": "Web Development",
    "title": "Create a simple to-do list application using React",
    "description": "Build a to-do list app where users can add, delete, and mark tasks as completed.",
    "solutions":{
      "JavaScript (React)": "<pre><code>import React, { useState } from 'react';\n\nfunction TodoApp() {\n    const [tasks, setTasks] = useState([]);\n    const [input, setInput] = useState('');\n\n    const addTask = () => {\n        if (input.trim()) {\n            setTasks([...tasks, { text: input, completed: false }]);\n            setInput('');\n        }\n    };\n\n    const toggleComplete = (index) => {\n        const newTasks = [...tasks];\n        newTasks[index].completed = !newTasks[index].completed;\n        setTasks(newTasks);\n    };\n\n    const deleteTask = (index) => {\n        const newTasks = tasks.filter((_, i) => i !== index);\n        setTasks(newTasks);\n    };\n\n    return (\n        &lt;div&gt;\n            &lt;h1&gt;To-Do List&lt;/h1&gt;\n            &lt;input \n                type=&quot;text&quot; \n                value={input} \n                onChange={(e) =&gt; setInput(e.target.value)} \n                placeholder=&quot;Add a new task&quot; \n            /&gt;\n            &lt;button onClick={addTask}&gt;Add&lt;/button&gt;\n            &lt;ul&gt;\n                {tasks.map((task, index) =&gt; (\n                    &lt;li key={index} style={{ textDecoration: task.completed ? 'line-through' : 'none' }}&gt;\n                        {task.text}\n                        &lt;button onClick={() =&gt; toggleComplete(index)}&gt;\n                            {task.completed ? 'Undo' : 'Complete'}\n                        &lt;/button&gt;\n                        &lt;button onClick={() =&gt; deleteTask(index)}&gt;Delete&lt;/button&gt;\n                    &lt;/li&gt;\n                ))}\n            &lt;/ul&gt;\n        &lt;/div&gt;\n    );\n}\n\nexport default TodoApp;</code></pre>"
    }
  },
  {
    "id": 21,
    "category": "Web Development",
    "title": "Build a RESTful API using Node.js and Express",
    "description": "Create a simple RESTful API for managing a list of users.",
    "solutions": {
      "JavaScript (Node.js/Express)": "const express = require('express');\nconst app = express();\nconst port = 3000;\n\napp.use(express.json());\n\nlet users = [];\n\n// Get all users\napp.get('/users', (req, res) => {\n    res.json(users);\n});\n\n// Get user by ID\napp.get('/users/:id', (req, res) => {\n    const user = users.find(u => u.id === parseInt(req.params.id));\n    if (user) {\n        res.json(user);\n    } else {\n        res.status(404).send('User not found');\n    }\n});\n\n// Create a new user\napp.post('/users', (req, res) => {\n    const newUser = { id: users.length + 1, name: req.body.name };\n    users.push(newUser);\n    res.status(201).json(newUser);\n});\n\n// Update a user\napp.put('/users/:id', (req, res) => {\n    const user = users.find(u => u.id === parseInt(req.params.id));\n    if (user) {\n        user.name = req.body.name;\n        res.json(user);\n    } else {\n        res.status(404).send('User not found');\n    }\n});\n\n// Delete a user\napp.delete('/users/:id', (req, res) => {\n    users = users.filter(u => u.id !== parseInt(req.params.id));\n    res.status(204).send();\n});\n\napp.listen(port, () => {\n    console.log(`Server running at http://localhost:${port}/`);\n});"
    }
  },
  {
    "id": 22,
    "category": "Web Development",
    "title": "Implement form validation using JavaScript",
    "description": "Create a form with fields like name, email, and password, and validate the inputs.",
    "solutions": {
      "HTML": "<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\\\"en\\\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\\\"UTF-8\\\"&gt;\n    &lt;meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\"&gt;\n    &lt;title&gt;Form Validation&lt;/title&gt;\n    &lt;style&gt;\n        .error { color: red; }\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;form id=\\\"myForm\\\" onsubmit=\\\"return validateForm()\\\"&gt;\n        Name: &lt;input type=\\\"text\\\" id=\\\"name\\\" name=\\\"name\\\"&gt;&lt;span class=\\\"error\\\" id=\\\"nameError\\\"&gt;&lt;/span&gt;&lt;br&gt;&lt;br&gt;\n        Email: &lt;input type=\\\"text\\\" id=\\\"email\\\" name=\\\"email\\\"&gt;&lt;span class=\\\"error\\\" id=\\\"emailError\\\"&gt;&lt;/span&gt;&lt;br&gt;&lt;br&gt;\n        Password: &lt;input type=\\\"password\\\" id=\\\"password\\\" name=\\\"password\\\"&gt;&lt;span class=\\\"error\\\" id=\\\"passwordError\\\"&gt;&lt;/span&gt;&lt;br&gt;&lt;br&gt;\n        &lt;input type=\\\"submit\\\" value=\\\"Submit\\\"&gt;\n    &lt;/form&gt;\n\n    &lt;script src=\\\"script.js\\\"&gt;&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;</code></pre>",
      "JavaScript": "<pre><code>function validateForm() {\n    let isValid = true;\n\n    // Clear previous errors\n    document.getElementById('nameError').innerText = '';\n    document.getElementById('emailError').innerText = '';\n    document.getElementById('passwordError').innerText = '';\n\n    const name = document.getElementById('name').value;\n    const email = document.getElementById('email').value;\n    const password = document.getElementById('password').value;\n\n    // Validate name\n    if (name.trim() === '') {\n        document.getElementById('nameError').innerText = 'Name is required';\n        isValid = false;\n    }\n\n    // Validate email\n    const emailPattern = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n    if (!emailPattern.test(email)) {\n        document.getElementById('emailError').innerText = 'Invalid email format';\n        isValid = false;\n    }\n\n    // Validate password\n    if (password.length < 6) {\n        document.getElementById('passwordError').innerText = 'Password must be at least 6 characters long';\n        isValid = false;\n    }\n\n    return isValid; // Prevent form submission if not valid\n}</code></pre>"
    }
  },
  {
    "id": 23,
    "category": "Web Development",
    "title": "Explain the box model in CSS",
    "description": "Describe the components of the CSS box model and how they affect layout.",
    "solutions": {
      "Answer": "The CSS box model consists of four components: content, padding, border, and margin.\n Content is the actual content of the box.\n Padding is the space between the content and the border.\n Border is the line surrounding the padding (if any).\n Margin is the space outside the border that separates the element from other elements.\n Understanding these components helps in designing layouts and controlling spacing."
    }
  },
  {
    "id": 24,
    "category": "Web Development",
    "title": "What are closures in JavaScript?",
    "description": "Explain closures with an example.",
    "solutions": {
      "Answer": "A closure is a function that retains access to its lexical scope even when the function is executed outside that scope.\n Example:\n\nfunction outer() {\n    let count = 0;\n    return function inner() {\n        count++;\n        return count;\n    };\n}\n\nconst counter = outer();\nconsole.log(counter()); // 1\nconsole.log(counter()); // 2\nconsole.log(counter()); // 3\n\nIn this example, 'inner' is a closure that has access to 'count' from 'outer', allowing it to maintain state between calls."
    }
  },
  {
    "id": 25,
    "category": "Web Development",
    "title": "Difference between == and === in JavaScript",
    "description": "Explain the difference between loose equality (==) and strict equality (===) operators.",
    "solutions": {
      "Answer": "The '==' operator checks for value equality after performing type coercion if necessary,\n while the '===' operator checks for both value and type equality without type coercion.\n For example:\n\n5 == '5' // true (type coercion occurs)\n5 === '5' // false (different types)\n\nUsing '===' is generally recommended to avoid unexpected results due to type coercion."
    }
  },
  {
    "id":26,
    "category":"System Design",
    "title":"Design a URL shortening service like Bitly",
    "description":"Outline the components and architecture for a URL shortening service.",
    "solutions":{
      "Answer":"A URL shortening service can be designed with the following components:\n\n1. API Layer: Handles incoming requests for shortening and redirecting URLs.\n2. Database: Stores the mapping between original URLs and their shortened versions. A NoSQL database like DynamoDB or a relational database like PostgreSQL can be used.\n3. Hashing Algorithm: Generates a unique short code for each URL. Techniques like base62 encoding can be used to create short, alphanumeric codes.\n4. Caching Layer: Uses a caching solution like Redis to store frequently accessed URLs for faster retrieval.\n5. Load Balancer: Distributes incoming traffic across multiple servers to ensure high availability and reliability.\n6. Analytics Module: Tracks usage statistics such as click counts, geographic locations, and referrers.\n7. Security Measures: Implements rate limiting, spam detection, and validation to prevent abuse of the service.\n\nThe architecture should be scalable to handle a large number of requests and should ensure low latency for both shortening and redirecting URLs."
    }
  },
  {
    "id":27,
    "category":"System Design",
    "title":"Design a scalable chat application",
    "description":"Describe the architecture and components needed for a real-time chat application.",
    "solutions":{
      "Answer":"A scalable chat application can be designed with the following components:\n\n1. Client Application: The front-end interface where users can send and receive messages. This can be a web or mobile app.\n2. WebSocket Server: Enables real-time communication between clients and the server using WebSockets for low-latency message delivery.\n3. Message Broker: A message queue system like RabbitMQ or Kafka to handle message delivery and ensure messages are processed in order.\n4. Database: A NoSQL database like MongoDB or Cassandra to store user data, chat history, and metadata.\n5. Load Balancer: Distributes incoming traffic across multiple WebSocket servers to ensure high availability and reliability.\n6. User Authentication Service: Manages user sign-up, login, and session management using OAuth or JWT tokens.\n7. Notification Service: Sends push notifications to users for new messages or events when they are offline.\n8. Media Storage: A service like AWS S3 to store and serve media files (images, videos) shared in chats.\n9. Analytics Module: Tracks user activity, message statistics, and system performance for monitoring and improvement.\n\nThe architecture should be designed to handle a large number of concurrent users, ensure message delivery guarantees, and provide a seamless user experience."
    }
  },
  {
    "id":28,
    "category":"System Design",
    "title":"Design a ride-sharing service like Uber",
    "description":"Explain the key components and architecture of a ride-sharing application.",
    "solutions":{
      "Answer":"A ride-sharing service can be designed with the following components:\n\n1. Client Application: The front-end interface for riders and drivers to request rides, view ride status, and manage profiles.\n2. API Gateway: Handles incoming requests from clients and routes them to appropriate services.\n3. Ride Matching Service: Matches riders with nearby drivers based on location, availability, and preferences using geospatial indexing.\n4. Real-Time Tracking Service: Uses GPS data to track the location of drivers and provide real-time updates to riders.\n5. Payment Gateway: Integrates with payment processors to handle fare calculations, payments, and receipts securely.\n6. Notification Service: Sends notifications to riders and drivers about ride status, promotions, and updates.\n7. Database: A combination of relational databases (e.g., PostgreSQL) for user data and NoSQL databases (e.g., MongoDB) for ride history and logs.\n8. Analytics Module: Tracks ride statistics, user behavior, and system performance for monitoring and improvement.\n9. Load Balancer: Distributes incoming traffic across multiple servers to ensure high availability and reliability.\n10. Driver Management Service: Manages driver profiles, ratings, and availability.\n\nThe architecture should be designed to handle high traffic, ensure low latency for ride requests, and provide a seamless experience for both riders and drivers."
    }
  },
  {
    "id":29,
    "category":"System Design",
    "title":"Design a content delivery network (CDN)",
    "description":"Describe the architecture and components of a CDN for delivering web content.",
    "solutions":{
      "Answer":"A Content Delivery Network (CDN) can be designed with the following components:\n\n1. Edge Servers: Distributed servers located in various geographic locations to cache and deliver content closer to users, reducing latency.\n2. Origin Server: The primary server where the original content is hosted. Edge servers fetch content from the origin server when not available in cache.\n3. Load Balancer: Distributes incoming requests across multiple edge servers to ensure high availability and reliability.\n4. DNS Service: Directs user requests to the nearest edge server based on geographic location using techniques like Anycast routing.\n5. Caching Mechanism: Implements caching strategies (e.g., time-to-live, cache invalidation) to manage content freshness and reduce load on the origin server.\n6. Security Features: Includes DDoS protection, SSL/TLS encryption, and Web Application Firewall (WAF) to secure content delivery.\n7. Analytics Module: Tracks usage statistics, performance metrics, and user behavior for monitoring and optimization.\n8. API Layer: Provides interfaces for managing CDN configurations, purging cache, and monitoring performance.\n\nThe architecture should be designed to handle high traffic volumes, ensure low latency for content delivery, and provide robust security measures."
    }
  },
  {
    "id":30,
    "category":"System Design",
    "title":"Design an e-commerce platform",
    "description":"Outline the key components and architecture of an e-commerce application.",
    "solutions":{
      "Answer":"An e-commerce platform can be designed with the following components:\n\n1. Client Application: The front-end interface for customers to browse products, add items to cart, and complete purchases.\n2. API Gateway: Handles incoming requests from clients and routes them to appropriate services.\n3. Product Catalog Service: Manages product listings, categories, pricing, and inventory using a database like PostgreSQL or MongoDB.\n4. Shopping Cart Service: Manages user carts, allowing users to add, remove, and update items in their cart.\n5. Order Management Service: Handles order processing, status tracking, and order history.\n6. Payment Gateway: Integrates with payment processors to handle secure transactions and payment methods.\n7. User Authentication Service: Manages user sign-up, login, and session management using OAuth or JWT tokens.\n8. Notification Service: Sends order confirmations, shipping updates, and promotional messages to customers.\n9. Review and Rating Service: Allows customers to leave reviews and ratings for products.\n10. Analytics Module: Tracks sales data, user behavior, and system performance for monitoring and improvement.\n11. Load Balancer: Distributes incoming traffic across multiple servers to ensure high availability and reliability.\n\nThe architecture should be designed to handle high traffic volumes, ensure secure transactions, and provide a seamless shopping experience for customers."

    }
  },
  {
    "id":31,
    "category":"System Design",
    "title":"Design a file storage service like Dropbox",
    "description":"Explain the architecture and components needed for a cloud-based file storage service.",
    "solutions":{
      "Answer":"A cloud-based file storage service can be designed with the following components:\n\n1. Client Application: The front-end interface for users to upload, download, and manage their files. This can be a web or mobile app.\n2. API Gateway: Handles incoming requests from clients and routes them to appropriate services.\n3. File Storage Service: Manages file uploads, downloads, and storage using a distributed file system like Amazon S3 or Google Cloud Storage.\n4. Metadata Service: Stores metadata about files (e.g., file name, size, type, owner) in a database like PostgreSQL or MongoDB.\n5. User Authentication Service: Manages user sign-up, login, and session management using OAuth or JWT tokens.\n6. Sync Service: Ensures that files are synchronized across multiple devices in real-time using techniques like WebSockets or long polling.\n7. Sharing Service: Allows users to share files and folders with others, managing permissions and access control.\n8. Versioning Service: Keeps track of file versions to allow users to revert to previous versions if needed.\n9. Load Balancer: Distributes incoming traffic across multiple servers to ensure high availability and reliability.\n10. Analytics Module: Tracks usage statistics, storage metrics, and system performance for monitoring and improvement.\n\nThe architecture should be designed to handle large volumes of data, ensure data integrity and security, and provide a seamless user experience for file management."
    }
  },
  {
    "id":32,
    "category":"OOP Concepts",
    "title":"Explain the four main principles of Object-Oriented Programming (OOP)",
    "description":"Describe the four main principles of OOP: Encapsulation, Abstraction, Inheritance, and Polymorphism.",
    "solutions":{
      "Answer":"The four main principles of Object-Oriented Programming (OOP) are:\n\n1. Encapsulation: This principle states that all data (attributes) and methods (functions) should be bundled together within a class. This helps to protect the internal state of the object from unintended interference and misuse by restricting access to certain components.\n\n2. Abstraction: Abstraction involves hiding the complex implementation details of a system and exposing only the necessary and relevant parts to the user. This simplifies the interaction with the system and allows users to focus on high-level functionalities without worrying about the underlying complexities.\n\n3. Inheritance: Inheritance allows a new class (subclass) to inherit properties and behaviors (methods) from an existing class (superclass). This promotes code reusability and establishes a hierarchical relationship between classes, enabling the creation of more specialized classes based on general ones.\n\n4. Polymorphism: Polymorphism enables objects of different classes to be treated as objects of a common superclass. It allows for method overriding (where a subclass provides a specific implementation of a method already defined in its superclass) and method overloading (where multiple methods with the same name coexist with different parameters). This enhances flexibility and extensibility in the code."
    }
  },
  {
    "id":33,
    "category":"OOP Concepts",
    "title":"What is the difference between a class and an object?",
    "description":"Explain the difference between a class and an object in OOP.",
    "solutions":{
      "Answer":"A class is a blueprint or template that defines the structure and behavior of objects. It encapsulates data (attributes) and methods (functions) that operate on that data. A class serves as a prototype for creating objects.\n\nAn object, on the other hand, is an instance of a class. It represents a specific realization of the class with its own unique state (attribute values) and behavior (methods). Objects are created based on the structure defined by the class and can interact with each other through their methods."
    }
  },
  {
    "id":34,
    "category":"OOP Concepts",
    "title":"What is inheritance in OOP?",
    "description":"Describe the concept of inheritance and how it promotes code reusability.",
    "solutions":{
      "Answer":"Inheritance is a fundamental principle of Object-Oriented Programming (OOP) that allows a new class (subclass or derived class) to inherit properties and behaviors (attributes and methods) from an existing class (superclass or base class). This establishes a hierarchical relationship between classes.\n\nInheritance promotes code reusability by allowing subclasses to reuse code from their superclasses without having to rewrite it. Subclasses can also extend or modify the inherited functionality by adding new attributes or methods, or by overriding existing ones. This leads to a more organized and maintainable codebase, as common functionality can be centralized in superclasses."
    }
  },
  {
    "id":35,
    "category":"OOP Concepts",
    "title":"What is polymorphism in OOP?",
    "description":"Explain polymorphism with examples of method overloading and method overriding.",
    "solutions":{
      "Answer":"Polymorphism is a core concept in Object-Oriented Programming (OOP) that allows objects of different classes to be treated as objects of a common superclass. It enables methods to perform different functions based on the object that invokes them, enhancing flexibility and extensibility in the code.\n\nThere are two main types of polymorphism:\n\n1. Method Overloading: This occurs when multiple methods in the same class have the same name but different parameter lists (different types or number of parameters). The appropriate method is selected based on the arguments passed during the method call.\n\nExample:\n\nclass MathOperations {\n    int add(int a, int b) {\n        return a + b;\n    }\n\n    double add(double a, double b) {\n        return a + b;\n    }\n}\n\nMathOperations math = new MathOperations();\nmath.add(5, 10); // Calls the first add method\nmath.add(5.5, 10.2); // Calls the second add method\n\n2. Method Overriding: This occurs when a subclass provides a specific implementation of a method that is already defined in its superclass. The overridden method in the subclass has the same name, return type, and parameters as the method in the superclass. When the method is called on an object of the subclass, the subclass's version is executed.\n\nExample:\n\nclass Animal {\n    void sound() {\n        System.out.println(\"Animal makes a sound\");\n    }\n}\n\nclass Dog extends Animal {\n    @Override\n    void sound() {\n        System.out.println(\"Dog barks\");\n    }\n}\n\nAnimal myDog = new Dog();\nmyDog.sound(); // Outputs: Dog barks"
    }
  },
  {
    "id":36,
    "category":"OOP Concepts",
    "title":"What is encapsulation in OOP?",
    "description":"Describe encapsulation and its benefits in OOP.",
    "solutions":{
      "Answer":"Encapsulation is a fundamental principle of Object-Oriented Programming (OOP) that involves bundling the data (attributes) and methods (functions) that operate on that data within a single unit, typically a class. It restricts direct access to some of an object's components, which helps to prevent unintended interference and misuse of the object's internal state.\n\nBenefits of encapsulation include:\n\n1. Data Hiding: By restricting access to an object's internal state, encapsulation protects the integrity of the data and prevents external code from making unintended changes.\n\n2. Improved Maintainability: Encapsulation allows for changes to be made to the internal implementation of a class without affecting external code that relies on the class's public interface.\n\n3. Enhanced Security: Encapsulation can help enforce access control by allowing only specific methods to modify an object's state, reducing the risk of accidental or malicious modifications.\n\n4. Clearer Interfaces: By exposing only necessary methods and attributes, encapsulation helps create a clear and concise interface for interacting with objects, making it easier for developers to understand and use them."
    }
  },
  {
    "id":37,
    "category":"OOP Concepts",
    "title":"What is abstraction in OOP?",
    "description":"Explain the concept of abstraction and how it simplifies complex systems.",
    "solutions":{
      "Answer":"Abstraction is a key principle of Object-Oriented Programming (OOP) that involves simplifying complex systems by hiding unnecessary implementation details and exposing only the essential features and functionalities to the user. It allows developers to focus on high-level concepts without getting bogged down by low-level complexities.\n\nAbstraction can be achieved through abstract classes and interfaces, which define a contract for subclasses to implement specific methods without dictating how those methods should be implemented.\n\nBenefits of abstraction include:\n\n1. Simplified Interaction: By exposing only relevant information, abstraction makes it easier for users to interact with complex systems without needing to understand all the underlying details.\n\n2. Reduced Complexity: Abstraction helps manage complexity by breaking down systems into smaller, more manageable components, allowing developers to work on specific parts without being overwhelmed by the entire system.\n\n3. Improved Code Reusability: Abstract classes and interfaces promote code reusability by allowing different implementations to share a common structure, making it easier to create new functionalities based on existing ones.\n\n4. Enhanced Maintainability: Abstraction allows for changes to be made to the internal implementation of a class without affecting external code that relies on the class's public interface, leading to more maintainable code."
    }
  },
  {
    "id":38,
    "category":"OOP Concepts",
    "title":"What is the difference between composition and inheritance?",
    "description":"Compare and contrast composition and inheritance in OOP.",
    "solutions":{
      "Answer":"Composition and inheritance are two fundamental concepts in Object-Oriented Programming (OOP) used to establish relationships between classes.\n\nInheritance is a mechanism where a new class (subclass) derives properties and behaviors from an existing class (superclass). It establishes an 'is-a' relationship, meaning the subclass is a specialized version of the superclass. Inheritance promotes code reusability by allowing subclasses to inherit common functionality from their superclasses.\n\nComposition, on the other hand, is a design principle where a class is composed of one or more objects from other classes. It establishes a 'has-a' relationship, meaning the class contains instances of other classes as its members. Composition allows for greater flexibility and modularity, as it enables the creation of complex objects by combining simpler ones without being constrained by a rigid class hierarchy.\n\nKey differences:\n1. Relationship: Inheritance represents an 'is-a' relationship, while composition represents a 'has-a' relationship.\n2. Flexibility: Composition is more flexible than inheritance, as it allows for dynamic changes in behavior by composing different objects at runtime.\n3. Code Reusability: Inheritance promotes code reusability through shared functionality, while composition promotes reusability by combining existing components.\n4. Coupling: Inheritance can lead to tight coupling between classes, making it harder to change the superclass without affecting subclasses. Composition tends to result in looser coupling, making it easier to modify individual components without impacting the entire system."
    }
  },
  {
    "id":39,
    "category":"OOP Concepts",
    "title":"What are design patterns in OOP?",
    "description":"Explain the concept of design patterns and provide examples of common design patterns.",
    "solutions":{
      "Answer":"Design patterns are reusable solutions to common problems that occur in software design. They provide a standard terminology and best practices for solving specific design challenges, making it easier for developers to communicate and collaborate on complex systems.\n\nCommon design patterns include:\n\n1. Singleton Pattern: Ensures that a class has only one instance and provides a global point of access to that instance. This is useful for managing shared resources like configuration settings or database connections.\n\n2. Factory Pattern: Provides an interface for creating objects without specifying the exact class of the object that will be created. This promotes loose coupling and allows for easier extension of the codebase.\n\n3. Observer Pattern: Defines a one-to-many dependency between objects, where a change in one object (the subject) automatically notifies and updates all dependent objects (the observers). This is commonly used in event-driven systems.\n\n4. Strategy Pattern: Enables selecting an algorithm's behavior at runtime by defining a family of algorithms, encapsulating each one, and making them interchangeable. This allows for greater flexibility and adaptability in the code.\n\n5. Decorator Pattern: Allows behavior to be added to individual objects dynamically without affecting the behavior of other objects from the same class. This is useful for extending functionality without modifying existing code.\n\nBy using design patterns, developers can create more maintainable, scalable, and flexible software systems."
    }
  },
  {
    "id":40,
    "category":"OOP Concepts",
    "title":"What is the SOLID principle in OOP?",
    "description":"Describe the SOLID principles and their importance in OOP.",
    "solutions":{
      "Answer":"The SOLID principles are a set of five design principles that promote maintainable, scalable, and flexible software development in Object-Oriented Programming (OOP). The principles are:\n\n1. Single Responsibility Principle (SRP): A class should have only one reason to change, meaning it should have only one responsibility or job. This makes classes easier to understand, maintain, and test.\n\n2. Open/Closed Principle (OCP): Software entities (classes, modules, functions) should be open for extension but closed for modification. This encourages developers to add new functionality without altering existing code, reducing the risk of introducing bugs.\n\n3. Liskov Substitution Principle (LSP): Subtypes must be substitutable for their base types without affecting the correctness of the program. This ensures that derived classes can be used interchangeably with their base classes without unexpected behavior.\n\n4. Interface Segregation Principle (ISP): Clients should not be forced to depend on interfaces they do not use. This promotes the creation of smaller, more specific interfaces rather than large, general-purpose ones, leading to more modular and flexible code.\n\n5. Dependency Inversion Principle (DIP): High-level modules should not depend on low-level modules; both should depend on abstractions. Additionally, abstractions should not depend on details; details should depend on abstractions. This reduces coupling between components and enhances code reusability and testability.\n\nBy adhering to the SOLID principles, developers can create software that is easier to maintain, extend, and adapt to changing requirements."
    }
  },
  {
    "id":41,
    "category":"Aptitude",
    "title":"What is the next number in the series: 2, 6, 12, 20, ?",
    "description":"Identify the pattern in the series and find the next number.",
    "solutions":{
      "Answer":"The pattern in the series is that each number is the sum of the previous number and the next even number. \n\n2 + 4 = 6\n6 + 6 = 12\n12 + 8 = 20\n20 + 10 = 30\n\nTherefore, the next number in the series is 30."
    }
  },
  {
    "id":42,
    "category":"Aptitude",
    "title":"If a train travels 60 miles in 1 hour and 30 minutes, what is its average speed in miles per hour?",
    "description":"Calculate the average speed of the train.",
    "solutions":{
      "Answer":"To calculate the average speed, we use the formula: \n\nAverage Speed = Total Distance / Total Time\n\nThe train travels 60 miles in 1 hour and 30 minutes, which is 1.5 hours.\n\nAverage Speed = 60 miles / 1.5 hours = 40 miles per hour.\n\nTherefore, the average speed of the train is 40 miles per hour."
    }
  },
  {
    "id":43,
    "category":"Aptitude",
    "title":"What is the area of a triangle with a base of 10 units and a height of 5 units?",
    "description":"Calculate the area of the triangle.",
    "solutions":{
      "Answer":"The area of a triangle can be calculated using the formula: \n\nArea = 0.5 * base * height\n\nIn this case, the base is 10 units and the height is 5 units.\n\nArea = 0.5 * 10 * 5 = 25 square units.\n\nTherefore, the area of the triangle is 25 square units."
    }
  },
  {
    "id":44,
    "category":"Aptitude",
    "title":"What is the value of x in the equation 2x + 3 = 11?",
    "description":"Solve for x in the given equation.",
    "solutions":{
      "Answer":"To solve for x, we need to isolate it on one side of the equation. \n\nStarting with the equation: 2x + 3 = 11\n\n1. Subtract 3 from both sides: 2x = 11 - 3\n2. Simplifying gives: 2x = 8\n3. Now, divide both sides by 2: x = 8 / 2\n4. Therefore, x = 4.\n\nThe value of x in the equation 2x + 3 = 11 is 4."
    }
  },
  {
    "id":45,
    "category":"Aptitude",
    "title":"What is the next number in the series: 1, 1, 2, 3, 5, 8, ?",
    "description":"Identify the pattern in the series and find the next number.",
    "solutions":{
      "Answer":"The pattern in the series is that each number is the sum of the two preceding numbers. \n\n1 + 1 = 2\n1 + 2 = 3\n2 + 3 = 5\n3 + 5 = 8\n5 + 8 = 13\n\nTherefore, the next number in the series is 13."
    }
  },
  {
    "id":46,
    "category":"Aptitude",
    "title":"If a car travels 150 miles in 3 hours, what is its average speed in miles per hour?",
    "description":"Calculate the average speed of the car.",
    "solutions":{
      "Answer":"To calculate the average speed, we use the formula: \n\nAverage Speed = Total Distance / Total Time\n\nThe car travels 150 miles in 3 hours.\n\nAverage Speed = 150 miles / 3 hours = 50 miles per hour.\n\nTherefore, the average speed of the car is 50 miles per hour."
    }
  },
  {
    "id":47,
    "category":"Aptitude",
    "title":"What is the area of a rectangle with a length of 8 units and a width of 4 units?",
    "description":"Calculate the area of the rectangle.",
    "solutions":{
      "Answer":"The area of a rectangle can be calculated using the formula: \n\nArea = length * width\n\nIn this case, the length is 8 units and the width is 4 units.\n\nArea = 8 * 4 = 32 square units.\n\nTherefore, the area of the rectangle is 32 square units."
    }
  },
  {
    "id":48,
    "category":"Aptitude",
    "title":"What is the value of y in the equation 3y - 4 = 11?",
    "description":"Solve for y in the given equation.",
    "solutions":{
      "Answer":"To solve for y, we need to isolate it on one side of the equation. \n\nStarting with the equation: 3y - 4 = 11\n\n1. Add 4 to both sides: 3y = 11 + 4\n2. Simplifying gives: 3y = 15\n3. Now, divide both sides by 3: y = 15 / 3\n4. Therefore, y = 5.\n\nThe value of y in the equation 3y - 4 = 11 is 5."
    }
  },
  {
    "id":49,
    "category":"Aptitude",
    "title":"What is the next number in the series: 10, 20, 30, 40, ?",
    "description":"Identify the pattern in the series and find the next number.",
    "solutions":{
      "Answer":"The pattern in the series is that each number increases by 10. \n\n10 + 10 = 20\n20 + 10 = 30\n30 + 10 = 40\n40 + 10 = 50\n\nTherefore, the next number in the series is 50."
    }
  },
  {
    "id":50,
    "category":"Real World Problems",
    "title":"How would you approach solving a problem where a website is loading slowly?",
    "description":"Identify potential causes and solutions for slow website loading times.",
    "solutions":{
      "Answer":"To approach this problem, I would take the following steps:\n\n1. **Analyze the Current Performance**: Use tools like Google PageSpeed Insights or GTmetrix to analyze the website's loading speed and identify bottlenecks.\n\n2. **Check Server Performance**: Ensure that the server hosting the website is performing optimally. This includes checking CPU usage, memory usage, and disk I/O.\n\n3. **Optimize Images and Assets**: Compress images and minify CSS/JavaScript files to reduce their size and improve loading times.\n\n4. **Implement Caching**: Use browser caching and server-side caching to reduce the load on the server and speed up page delivery.\n\n5. **Review Third-Party Scripts**: Evaluate the impact of third-party scripts (e.g., ads, analytics) on loading times and remove any that are not essential.\n\n6. **Consider a Content Delivery Network (CDN)**: Implement a CDN to distribute content closer to users and reduce latency.\n\n7. **Monitor and Test Regularly**: Continuously monitor the website's performance and conduct regular tests to ensure that loading times remain optimal.\n\nBy following these steps, I would aim to identify the root causes of the slow loading times and implement effective solutions."
    }
  },
  {
    "id":51,
    "category":"Real World Problems",
    "title":"How would you handle a situation where a team member is not contributing effectively?",
    "description":"Describe strategies for addressing underperformance in a team setting.",
    "solutions":{
      "Answer":"To handle a situation where a team member is not contributing effectively, I would take the following steps:\n\n1. **Identify the Issue**: Observe and gather information to understand the specific areas where the team member is underperforming.\n\n2. **Communicate Privately**: Schedule a one-on-one meeting to discuss the concerns in a private and respectful manner. Focus on specific behaviors and their impact on the team rather than making it personal.\n\n3. **Listen Actively**: Give the team member an opportunity to share their perspective and any challenges they may be facing that could be affecting their performance.\n\n4. **Set Clear Expectations**: Clearly outline the expectations for their role and responsibilities, and discuss any gaps between current performance and expectations.\n\n5. **Provide Support**: Offer resources, training, or mentorship to help the team member improve their skills and performance.\n\n6. **Establish Goals**: Work together to set achievable goals and a timeline for improvement, along with regular check-ins to monitor progress.\n\n7. **Follow Up**: Continuously follow up on their progress and provide feedback, both positive and constructive, to encourage improvement.\n\n8. **Consider Consequences**: If there is no improvement despite support and clear communication, consider discussing potential consequences or alternative roles within the organization.\n\nBy taking these steps, I would aim to address the underperformance constructively while maintaining a positive team dynamic."
    }
  },
  {
    "id":52,
    "category":"Real World Problems",
    "title":"How would you prioritize tasks when managing multiple projects?",
    "description":"Explain your approach to task prioritization in a multi-project environment.",
    "solutions":{
      "Answer":"To prioritize tasks when managing multiple projects, I would follow these steps:\n\n1. **List All Tasks**: Create a comprehensive list of all tasks across all projects that need to be completed.\n\n2. **Assess Urgency and Importance**: Use the Eisenhower Matrix to categorize tasks based on their urgency and importance. This helps identify which tasks require immediate attention versus those that can be scheduled for later.\n\n3. **Set Clear Goals**: Define clear objectives for each project to understand the desired outcomes and deadlines.\n\n4. **Evaluate Dependencies**: Identify any dependencies between tasks or projects that may affect their prioritization. Tasks that are prerequisites for others should be prioritized higher.\n\n5. **Allocate Resources**: Consider the availability of resources (time, team members, budget) and allocate them accordingly to ensure that high-priority tasks have the necessary support.\n\n6. **Communicate with Stakeholders**: Regularly communicate with project stakeholders to understand their priorities and expectations, which can influence task prioritization.\n\n7. **Use Project Management Tools**: Utilize project management software (e.g., Trello, Asana, Jira) to organize tasks, set deadlines, and track progress.\n\n8. **Review and Adjust**: Continuously review the task list and adjust priorities as needed based on changing circumstances or new information.\n\nBy following this structured approach, I would ensure that tasks are prioritized effectively, allowing for efficient management of multiple projects."
    }
  },
  {
    "id":53,
    "category":"Real World Problems",
    "title":"How would you approach learning a new technology or programming language?",
    "description":"Describe your strategy for quickly acquiring proficiency in a new technology.",
    "solutions":{
      "Answer":"To quickly acquire proficiency in a new technology or programming language, I would follow these steps:\n\n1. **Set Clear Goals**: Define what I want to achieve with the new technology, such as building a specific project or understanding core concepts.\n\n2. **Research and Gather Resources**: Identify reputable resources such as official documentation, online tutorials, courses, and books that provide comprehensive information about the technology.\n\n3. **Hands-On Practice**: Start with small projects or exercises to apply what I learn in a practical context. This helps reinforce concepts and build confidence.\n\n4. **Join Communities**: Engage with online communities, forums, or local meetups related to the technology. This provides opportunities to ask questions, share knowledge, and learn from others' experiences.\n\n5. **Follow a Structured Learning Path**: Create a learning schedule that includes dedicated time for studying and practicing regularly. Consistency is key to retaining information and building skills.\n\n6. **Work on Real-World Projects**: Once I have a basic understanding, I would work on real-world projects or contribute to open-source projects to gain practical experience and deepen my knowledge.\n\n7. **Seek Feedback**: Share my work with peers or mentors to receive constructive feedback and identify areas for improvement.\n\n8. **Stay Updated**: Continuously follow industry news, blogs, and updates related to the technology to stay informed about new features and best practices.\n\nBy following this strategy, I would be able to efficiently learn and become proficient in a new technology or programming language."
    }
  },
  {
    "id":54,
    "category":"Real World Problems",
    "title":"How would you handle a situation where you disagree with a team member's approach to solving a problem?",
    "description":"Explain your method for resolving conflicts within a team.",
    "solutions":{
      "Answer":"To handle a situation where I disagree with a team member's approach to solving a problem, I would take the following steps:\n\n1. **Stay Calm and Open-Minded**: Approach the situation with a calm demeanor and an open mind, recognizing that different perspectives can lead to better solutions.\n\n2. **Listen Actively**: Give the team member an opportunity to explain their approach fully. Listen carefully to understand their reasoning and the benefits they see in their solution.\n\n3. **Express My Perspective**: Clearly and respectfully articulate my own viewpoint, including the reasons why I believe my approach may be more effective or suitable for the situation.\n\n4. **Seek Common Ground**: Identify any areas of agreement between our approaches and build on those to find a compromise or hybrid solution that incorporates the strengths of both perspectives.\n\n5. **Evaluate Options Together**: Collaboratively assess the pros and cons of each approach, considering factors such as feasibility, impact, and alignment with team goals.\n\n6. **Involve a Mediator if Necessary**: If we are unable to reach a consensus, consider involving a neutral third party, such as a team lead or manager, to help facilitate the discussion and provide an objective perspective.\n\n7. **Focus on the Goal**: Keep the focus on achieving the best outcome for the project or team rather than on personal preferences or ego.\n\n8. **Agree on a Plan**: Once a decision is made, agree on a clear plan of action and ensure that both parties are committed to supporting its implementation.\n\nBy following these steps, I would aim to resolve conflicts constructively while maintaining a positive and collaborative team environment."
    }
  },
  {
    "id":55,
    "category":"Real World Problems",
    "title":"How would you ensure effective communication within a remote team?",
    "description":"Describe strategies for maintaining clear and consistent communication in a remote work environment.",
    "solutions":{
      "Answer":"To ensure effective communication within a remote team, I would implement the following strategies:\n\n1. **Establish Clear Communication Channels**: Use a combination of tools such as Slack for instant messaging, Zoom for video calls, and email for formal communication to ensure that team members can easily reach each other.\n\n2. **Set Expectations**: Clearly define communication expectations, including response times, availability hours, and preferred methods of communication for different types of messages.\n\n3. **Regular Check-Ins**: Schedule regular team meetings and one-on-one check-ins to discuss progress, address any challenges, and provide updates. This helps maintain a sense of connection and accountability.\n\n4. **Use Collaborative Tools**: Leverage project management tools like Trello, Asana, or Jira to keep everyone informed about project status, deadlines, and responsibilities.\n\n5. **Encourage Open Communication**: Foster an environment where team members feel comfortable sharing their ideas, concerns, and feedback without fear of judgment.\n\n6. **Document Everything**: Maintain clear documentation of decisions, processes, and project details in shared repositories (e.g., Google Drive, Confluence) to ensure that everyone has access to the same information.\n\n7. **Promote Social Interaction**: Encourage informal interactions through virtual coffee breaks or team-building activities to strengthen relationships and improve team cohesion.\n\n8. **Be Mindful of Time Zones**: When scheduling meetings or deadlines, consider the different time zones of team members to ensure inclusivity and avoid inconvenience.\n\nBy implementing these strategies, I would aim to create a transparent and collaborative communication environment that supports the success of the remote team."
    }
  },
  {
    "id":56,
    "category":"Real World Problems",
    "title":"How would you manage a project with tight deadlines and limited resources?",
    "description":"Explain your approach to project management under constraints.",
    "solutions":{
      "Answer":"To manage a project with tight deadlines and limited resources, I would take the following approach:\n\n1. **Define Clear Objectives**: Clearly outline the project goals, deliverables, and success criteria to ensure that everyone understands what needs to be achieved.\n\n2. **Prioritize Tasks**: Identify the most critical tasks that will have the greatest impact on the project's success and prioritize them accordingly. Use techniques like the MoSCoW method (Must have, Should have, Could have, Won't have) to categorize tasks.\n\n3. **Create a Realistic Timeline**: Develop a detailed project timeline that includes milestones and deadlines for each task. Be realistic about what can be accomplished within the given timeframe and adjust expectations as needed.\n\n4. **Allocate Resources Wisely**: Assess the available resources (team members, budget, tools) and allocate them strategically to ensure that high-priority tasks are adequately supported.\n\n5. **Communicate Effectively**: Maintain open lines of communication with all stakeholders to provide regular updates on progress, address any issues promptly, and manage expectations.\n\n6. **Monitor Progress Closely**: Use project management tools to track progress against the timeline and identify any potential delays or bottlenecks early on.\n\n7. **Be Flexible and Adaptable**: Be prepared to adjust plans as necessary based on changing circumstances or new information. This may involve re-prioritizing tasks or reallocating resources.\n\n8. **Focus on Quality**: Even with tight deadlines, ensure that quality is not compromised. Implement quality control measures to review work and ensure it meets the required standards.\n\n9. **Celebrate Small Wins**: Acknowledge and celebrate progress along the way to keep the team motivated and focused on achieving the final goal.\n\nBy following this structured approach, I would aim to successfully manage the project despite the constraints of tight deadlines and limited resources."
    }
  },
  {
    "id":57,
    "category":"Real World Problems",
    "title":"How would you approach debugging a complex software issue?",
    "description":"Describe your method for identifying and resolving bugs in software.",
    "solutions":{
      "Answer":"To approach debugging a complex software issue, I would follow these steps:\n\n1. **Reproduce the Issue**: Start by trying to consistently reproduce the bug in a controlled environment. This helps to understand the conditions under which the issue occurs.\n\n2. **Gather Information**: Collect as much information as possible about the bug, including error messages, logs, user reports, and any recent changes made to the codebase that could be related to the issue.\n\n3. **Isolate the Problem**: Use techniques such as binary search or commenting out sections of code to narrow down the specific area of the code where the bug is occurring.\n\n4. **Analyze the Code**: Review the relevant code sections carefully to identify any logical errors, incorrect assumptions, or edge cases that may be causing the issue.\n\n5. **Use Debugging Tools**: Utilize debugging tools and techniques such as breakpoints, step-through debugging, and variable inspection to gain insights into the program's state at various points during execution.\n\n6. **Test Hypotheses**: Formulate hypotheses about what might be causing the bug and test them systematically by making small changes to the code or configuration and observing the results.\n\n7. **Consult Documentation and Resources**: Refer to official documentation, online forums, or colleagues who may have encountered similar issues for additional insights or solutions.\n\n8. **Implement a Fix**: Once the root cause is identified, implement a fix and thoroughly test it to ensure that it resolves the issue without introducing new problems.\n\n9. **Document the Process**: Document the steps taken to identify and resolve the bug, including any lessons learned, to aid in future debugging efforts.\n\n10. **Monitor Post-Fix**: After deploying the fix, monitor the system closely to ensure that the issue has been fully resolved and that no new issues have arisen.\n\nBy following this systematic approach, I would aim to efficiently identify and resolve complex software issues."
    }
  },
  {
    "id":58,
    "category":"Real World Problems",
    "title":"How would you ensure the security of a web application?",
    "description":"Explain strategies for protecting a web application from security threats.",
    "solutions":{
      "Answer":"To ensure the security of a web application, I would implement the following strategies:\n\n1. **Use HTTPS**: Ensure that the web application uses HTTPS to encrypt data transmitted between the client and server, protecting it from interception and tampering.\n\n2. **Input Validation**: Implement robust input validation to prevent common vulnerabilities such as SQL injection, cross-site scripting (XSS), and cross-site request forgery (CSRF). This includes sanitizing user inputs and using parameterized queries.\n\n3. **Authentication and Authorization**: Use strong authentication mechanisms (e.g., multi-factor authentication) and implement role-based access control (RBAC) to ensure that users only have access to resources they are authorized to use.\n\n4. **Secure Session Management**: Use secure cookies, set appropriate session timeouts, and implement measures to prevent session hijacking and fixation.\n\n5. **Regular Updates and Patching**: Keep all software components, including libraries and frameworks, up to date with the latest security patches to protect against known vulnerabilities.\n\n6. **Implement Security Headers**: Use HTTP security headers such as Content Security Policy (CSP), X-Content-Type-Options, and X-Frame-Options to enhance the security of the web application.\n\n7. **Data Encryption**: Encrypt sensitive data both in transit and at rest to protect it from unauthorized access.\n\n8. **Conduct Security Testing**: Regularly perform security assessments, including vulnerability scanning and penetration testing, to identify and address potential security weaknesses.\n\n9. **Monitor and Log Activity**: Implement logging and monitoring to detect suspicious activities and respond promptly to potential security incidents.\n\n10. **Educate Users and Developers**: Provide training on security best practices for both users and developers to raise awareness about potential threats and how to mitigate them.\n\nBy implementing these strategies, I would aim to create a secure web application that protects user data and maintains the integrity of the system."
    }
  },
  {
    "id":59,
    "category":"DSA",
    "title":"What is the difference between a stack and a queue?",
    "description":"Explain the key differences between stack and queue data structures.",
    "solutions":{
      "Answer":"The key differences between stack and queue data structures are as follows:\n\n1. **Order of Operations**:\n   - Stack: Follows Last In First Out (LIFO) principle. The last element added is the first one to be removed.\n   - Queue: Follows First In First Out (FIFO) principle. The first element added is the first one to be removed.\n\n2. **Primary Operations**:\n   - Stack: Supports push (add) and pop (remove) operations.\n   - Queue: Supports enqueue (add) and dequeue (remove) operations.\n\n3. **Use Cases**:\n   - Stack: Used in scenarios like function call management (call stack), undo mechanisms in applications, and expression evaluation.\n   - Queue: Used in scenarios like task scheduling, print job management, and breadth-first search (BFS) in graphs.\n\n4. **Implementation**:\n   - Stack: Can be implemented using arrays or linked lists, with a pointer to the top element.\n   - Queue: Can be implemented using arrays or linked lists, with pointers to the front and rear elements.\n\n5. **Accessing Elements**:\n   - Stack: Only the top element is accessible directly.\n   - Queue: Both front and rear elements are accessible directly.\n\nIn summary, stacks and queues are both linear data structures but differ in their order of operations and use cases."
    }
  },
  {
    "id":60,
    "category":"DSA",
    "title":"What is a binary search tree (BST)?",
    "description":"Define a binary search tree and explain its properties.",
    "solutions":{
      "Answer":"A binary search tree (BST) is a data structure that consists of nodes, where each node has at most two children, referred to as the left and right child. The key properties of a BST are:\n\n1. **Node Structure**: Each node contains a value (key), a reference to the left child, and a reference to the right child.\n\n2. **Ordering Property**: For any given node:\n   - All values in the left subtree are less than the node's value.\n   - All values in the right subtree are greater than the node's value.\n\n3. **No Duplicate Values**: Typically, BSTs do not allow duplicate values, meaning each value must be unique within the tree.\n\n4. **Dynamic Size**: A BST can grow and shrink dynamically as elements are added or removed.\n\n5. **Efficient Search**: The average time complexity for search, insertion, and deletion operations in a balanced BST is O(log n), where n is the number of nodes in the tree. However, in the worst case (e.g., when the tree becomes unbalanced), these operations can degrade to O(n).\n\n6. **Traversal Methods**: Common traversal methods for BSTs include in-order (left-root-right), pre-order (root-left-right), and post-order (left-right-root) traversals.\n\nIn summary, a binary search tree is a hierarchical data structure that allows for efficient searching, insertion, and deletion of elements while maintaining a sorted order."
    }
  },
  {
    "id":61,
    "category":"DSA",
    "title":"What is the time complexity of common operations in a hash table?",
    "description":"Discuss the average and worst-case time complexities for insertion, deletion, and search operations in a hash table.",
    "solutions":{
      "Answer":"In a hash table, the time complexities for common operations are as follows:\n\n1. **Insertion**:\n   - Average Case: O(1) - Inserting an element typically takes constant time due to direct access via the hash function.\n   - Worst Case: O(n) - In the worst case, if many elements hash to the same index (collision), it may require traversing a linked list or another structure at that index.\n\n2. **Deletion**:\n   - Average Case: O(1) - Similar to insertion, deletion usually takes constant time when the element's index is known.\n   - Worst Case: O(n) - In the worst case, if there are many collisions, it may require searching through a list of elements at that index to find and remove the target element.\n\n3. **Search**:\n   - Average Case: O(1) - Searching for an element is typically constant time due to direct access via the hash function.\n   - Worst Case: O(n) - In the worst case, if many elements collide at the same index, it may require searching through a list of elements at that index to find the target element.\n\nOverall, hash tables provide efficient average-case performance for insertion, deletion, and search operations, but their performance can degrade in scenarios with high collision rates. To mitigate this, techniques such as resizing the hash table and using better hash functions are often employed."
    }
  },
  {
    "id":62,
    "category":"SQL",
    "title":"Write a query to rank employees based on their salary using RANK().",
    "description":"Provide an SQL query that ranks employees by their salary in descending order.",
    "solutions":{
      "SQL":"Here is an SQL query that uses the RANK() window function to rank employees by their salary in descending order:\nSELECT employee_id, salary,\n       RANK() OVER (ORDER BY salary DESC) AS salary_rank\nFROM employees;\n```"
    }
  },
  {

    "id":63,
    "category":"SQL",
    "title":"Write a query to pivot data to display department names as columns and employee counts as values.",
    "description":"Provide an SQL query that pivots employee data by department.",
    "solutions":{
      "SQL":"Here is an SQL query that uses the PIVOT operator to display department names as columns and employee counts as values:\n\nSELECT *\nFROM (SELECT department_name, employee_id\n      FROM employees) AS source_table\nPIVOT (COUNT(employee_id)\n       FOR department_name IN ([HR], [Engineering], [Sales])) AS pivot_table;\n```"
    }
  },
  {
    "id":64,
    "category":"SQL",
    "title":"Write a query to find all departments where the total salary > company’s average salary.",
    "description":"Provide an SQL query that identifies departments with total salaries exceeding the company's average salary.",
    "solutions":{
      "SQL":"Here is an SQL query that finds all departments where the total salary exceeds the company's average salary:\n\nWITH CompanyAverage AS (\n    SELECT AVG(salary) AS avg_salary\n    FROM employees\n), DepartmentSalaries AS (\n    SELECT department_id, SUM(salary) AS total_salary\n    FROM employees\n    GROUP BY department_id\n)\nSELECT ds.department_id, ds.total_salary\nFROM DepartmentSalaries ds, CompanyAverage ca\nWHERE ds.total_salary > ca.avg_salary;\n```"
    }
  },
  {
    "id":65,
    "category":"SQL",
    "title":"Write a query to find the longest consecutive streak of working days from an Attendance table.",
    "description":"Provide an SQL query that calculates the longest consecutive streak of working days for employees.",
    "solutions":{
      "SQL":"Here is an SQL query that finds the longest consecutive streak of working days from an Attendance table:\n\nWITH AttendanceWithRowNum AS (\n    SELECT employee_id, attendance_date,\n           ROW_NUMBER() OVER (PARTITION BY employee_id ORDER BY attendance_date) AS rn\n    FROM Attendance\n), Streaks AS (\n    SELECT employee_id, attendance_date,\n           DATEADD(DAY, -rn, attendance_date) AS streak_group\n    FROM AttendanceWithRowNum\n)\nSELECT employee_id, COUNT(*) AS longest_streak\nFROM Streaks\nGROUP BY employee_id, streak_group\nORDER BY longest_streak DESC;\n```"
    }
  },
  {
    "id":66,
    "category":"Web Development",
    "title":"Build a drag and drop file uploader using HTML5 and JavaScript.",
    "description":"Create a simple drag and drop file uploader interface.",
    "solutions":{
      "HTML": "Here is a simple HTML structure for the drag and drop file uploader:\n&lt;div id=&quot;drop-area&quot;&gt;\n    &lt;form class=&quot;my-form&quot;&gt;\n        &lt;input type=&quot;file&quot; id=&quot;fileElem&quot; multiple accept=&quot;image/*&quot; style=&quot;display:none;&quot;&gt;\n        &lt;label class=&quot;button&quot; for=&quot;fileElem&quot;&gt;Select some files&lt;/label&gt;\n        &lt;span id=&quot;fileList&quot;&gt;&lt;/span&gt;\n    &lt;/form&gt;\n&lt;/div&gt;",
      "CSS": "Here is some basic CSS to style the drop area:\n\n#drop-area {\n    border: 2px dashed #ccc;\n    border-radius: 20px;\n    width: 300px;\n    height: 200px;\n    padding: 20px;\n    text-align: center;\n}\n.button {\n    display: inline-block;\n    padding: 10px 20px;\n    background: #007bff;\n    color: white;\n    border-radius: 5px;\n    cursor: pointer;\n}",
      "JavaScript": "Here is a simple JavaScript code to handle the drag and drop functionality:\n\ndocument.addEventListener('DOMContentLoaded', function() {\n    let dropArea = document.getElementById('drop-area');\n    let fileList = document.getElementById('fileList');\n\n    dropArea.addEventListener('dragover', function(event) {\n        event.preventDefault();\n        dropArea.classList.add('highlight');\n    });\n\n    dropArea.addEventListener('dragleave', function() {\n        dropArea.classList.remove('highlight');\n    });\n\n    dropArea.addEventListener('drop', function(event) {\n        event.preventDefault();\n        dropArea.classList.remove('highlight');\n        let files = event.dataTransfer.files;\n        handleFiles(files);\n    });\n\n    function handleFiles(files) {\n        for (let i = 0; i &lt; files.length; i++) {\n            let file = files[i];\n            let listItem = document.createElement('div');\n            listItem.textContent = file.name;\n            fileList.appendChild(listItem);\n        }\n    }\n});"
    }
  },
  {
    "id":67,
    "category":"Web Development",
    "title":"Create a responsive navigation bar using HTML and CSS.",
    "description":"Design a navigation bar that adapts to different screen sizes.",
    "solutions":{
    "HTML": "Here is a simple HTML structure for a responsive navigation bar:\n\n&lt;nav class=&quot;navbar&quot;&gt;\n    &lt;div class=&quot;logo&quot;&gt;MyWebsite&lt;/div&gt;\n    &lt;ul class=&quot;nav-links&quot;&gt;\n        &lt;li&gt;&lt;a href=&quot;#home&quot;&gt;Home&lt;/a&gt;&lt;/li&gt;\n        &lt;li&gt;&lt;a href=&quot;#about&quot;&gt;About&lt;/a&gt;&lt;/li&gt;\n        &lt;li&gt;&lt;a href=&quot;#services&quot;&gt;Services&lt;/a&gt;&lt;/li&gt;\n        &lt;li&gt;&lt;a href=&quot;#contact&quot;&gt;Contact&lt;/a&gt;&lt;/li&gt;\n    &lt;/ul&gt;\n    &lt;div class=&quot;burger&quot;&gt;\n        &lt;div class=&quot;line1&quot;&gt;&lt;/div&gt;\n        &lt;div class=&quot;line2&quot;&gt;&lt;/div&gt;\n        &lt;div class=&quot;line3&quot;&gt;&lt;/div&gt;\n    &lt;/div&gt;\n&lt;/nav&gt;",
    "CSS": "Here is some basic CSS to style the navigation bar:\n\n.navbar {\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    padding: 10px 20px;\n    background: #333;\n}\n.logo {\n    color: white;\n    font-size: 24px;\n}\n.nav-links {\n    list-style: none;\n    display: flex;\n    gap: 15px;\n}\n.nav-links li a {\n    color: white;\n    text-decoration: none;\n}\n.burger {\n    display: none;\n    flex-direction: column;\n    cursor: pointer;\n}\n.burger div {\n    width: 25px;\n    height: 3px;\n    background: white;\n    margin: 4px 0;\n}",
    "JavaScript": "Here is a simple JavaScript code to handle the responsive navigation:\n\ndocument.addEventListener('DOMContentLoaded', function() {\n    const burger = document.querySelector('.burger');\n    const navLinks = document.querySelector('.nav-links');\n\n    burger.addEventListener('click', function() {\n        navLinks.classList.toggle('active');\n    });\n});"
    }
  }
]
